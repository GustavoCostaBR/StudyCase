# Use seleniumbase/chrome as a base image, which already includes Chrome and ChromeDriver
FROM seleniumbase/chrome:latest

# Set working directory (already set in seleniumbase/chrome, but good to keep for clarity)
WORKDIR /app

# Copy your project into the container
COPY . .

# Install Python dependencies from requirement.txt
# You should have a requirement.txt with your python dependencies in the same folder as your Dockerfile
RUN pip install --upgrade pip && pip install -r requirement.txt

# Set environment variables for Python output buffering (good practice for logging in containers)
ENV PYTHONUNBUFFERED=1

# No need to define CHROMEDRIVER_PATH, it's already in PATH in seleniumbase/chrome image

# Set environment variables for RabbitMQ connection (if needed, these can also be passed via docker-compose)
ENV RABBITMQ_HOST=rabbitmq
ENV RABBITMQ_PORT=5672

# Command to run your Python consumer script. Adjust "src/consumer.py" to your script's path
CMD ["python", "-m", "src.consumer"]